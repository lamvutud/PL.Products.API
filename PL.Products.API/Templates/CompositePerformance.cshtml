@model PL.Products.API.Html.GipsReportViewModel
@using Microsoft.AspNetCore.Mvc.ViewFeatures;

<!DOCTYPE html>
<html>
<head>
	<title>@Model.ReportTitle</title>
	<style>

		body {
		font-family: Arial, sans-serif;
		}

		.page-break {
		page-break-after: always;
		}

		.table {
		width: 100%;
		border-collapse: collapse;
		}

		.table th, .table td {
		border: 1px solid black;
		padding: 8px;
		text-align: center;
		}

		.table th {
		font-weight: bold;
		}

		.footer {
		position: fixed;
		bottom: 10px;
		width: 100%;
		text-align: center;
		font-size: 12px;
		}

		#toc-content a {
		display: block;
		text-decoration: none;
		color: black;
		margin-bottom: 5px;
		}

		#toc-content a[data-level="h2"] {
		margin-left: 20px;
		}

		#toc-content a[data-level="h3"] {
		margin-left: 40px;
		}

		.chart-container {
		width: 50%;
		display: inline-block;
		padding: 10px;
		box-sizing: border-box;
		vertical-align: top; /* Align charts to the top of the container */
		}

		canvas {
		width: 100% !important;
		/* height: 400px !important; /* Same height for both charts */ */
		}

		.charts-wrapper {
		width: 100%;
		display: flex;
		justify-content: space-between;
		}

		/* Styling for the header number in superscript (small and near the text) */
		th.return-column, th.benchmark-column {
		position: relative;
		}

		.superscript {
		font-size: 0.8em;
		vertical-align: super; /* Align the superscript with the text */
		margin-left: 5px; /* Adjust spacing between the superscript and the text */
		}

		/* Styling for the footnote */
		.table-footnote {
		font-size: 12px;
		font-style: italic;
		margin-top: 10px;
		text-align: left;
		}

		/* Styling for the small footnote number in the text */
		.footnote-number {
		font-size: 10px; /* Smaller font for footnote number */
		vertical-align: top;
		}

		.total-row td {
		font-weight: bold;
		}

		.disclaimer {
		column-count: 2;
		column-gap: 40px; /* Adjust the space between columns */
		text-align: justify; /* Optional: Justifies the text */
		}

		#toc {
		border: 1px solid #ccc;
		padding: 10px;
		margin-bottom: 20px;
		}

		h1, h2, h3 {
		counter-increment: section;
		}

		.toc-entry {
		display: flex;
		justify-content: space-between;
		}

		#toc-list {
		list-style: none; /* Removes default list styling */
		padding: 0;
		margin: 0;
		}

		#toc-list li {
		font-weight: bold; /* Makes all TOC text bold */
		display: flex; /* Aligns text and page number horizontally */
		justify-content: space-between; /* Ensures title and page number are aligned */
		padding: 5px 0;
		}

		#toc-list a {
		text-decoration: none; /* Removes underline */
		color: inherit; /* Keeps text color as normal text */
		flex-grow: 1; /* Allows text to take available space */
		}

		.toc-page {
		font-weight: bold; /* Makes page number bold */
		}


	</style>
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>

	<!-- First Page -->
	<div>
		<img src="@Model.LogoUrl" alt="Company Logo" style="width: 150px;" />
		<h1>@Model.ReportTitle</h1>		
	</div>

	<div class="page-break"></div> 

	<!-- Table of Contents -->	
	<h1>Table of Contents</h1>
	<div id="toc">		
		<ul id="toc-list"></ul>
	</div>

	<div class="page-break"></div>

	<!-- Second Page: Table -->
	<h2>Composite Performance</h2>

	@{
		// Determine superscript numbers and explanations for each column
		var returnSuperscriptNumber = 0;
		var benchmarkSuperscriptNumber = 0;
		var returnSuperscriptText = string.Empty;
		var benchmarkSuperscriptText = string.Empty;

		// Check for conditions in the Return column
		if (Model.Performances.Any(p => p.Return < 0))
		{
			returnSuperscriptNumber = 1;
			returnSuperscriptText = "One or more returns are negative.";
		}
		else if (Model.Performances.Any(p => p.Return == null))
		{
			returnSuperscriptNumber = 1;
			returnSuperscriptText = "Data is not complete.";
		}

		// Check for conditions in the Benchmark Return column
		if (Model.Performances.Any(p => p.BenchmarkReturn < 0))
		{
			benchmarkSuperscriptNumber = returnSuperscriptNumber > 0 ? returnSuperscriptNumber + 1 : 1; // Benchmark superscript number depends on the Return column
			benchmarkSuperscriptText = $"One or more benchmark returns are negative.";
		}
		else if (Model.Performances.Any(p => p.BenchmarkReturn == null))
		{
			benchmarkSuperscriptNumber = returnSuperscriptNumber > 0 ? returnSuperscriptNumber + 1 : 1; // Benchmark superscript number depends on the Return column
			benchmarkSuperscriptText = $"Data is not complete for benchmark.";
		}
	}

	<table class="table">
		<thead>
			<tr>
				<th>Year</th>
				<th class="return-column">
					Return (%)
					@if (returnSuperscriptNumber > 0)
					{
						<span class="superscript">@returnSuperscriptNumber</span>
					}
				</th>
				<th class="benchmark-column">
					Benchmark Return (%)
					@if (benchmarkSuperscriptNumber > 0)
					{
						<span class="superscript">@benchmarkSuperscriptNumber</span>
					}
				</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var perf in Model.Performances)
			{
				<tr>
					<td>@perf.Year @(perf.IsPartialYear ? "*" : "")</td>
					<td>@perf.Return</td>
					<td>@perf.BenchmarkReturn</td>
				</tr>
			}
			<tr class="total-row">
				<td><strong>Total</strong></td>
				<td>
					<strong>
						@Model.Performances.Sum(p => p.Return)
					</strong>
				</td>
				<td>
					<strong>
						@Model.Performances.Sum(p => p.BenchmarkReturn)
					</strong>
				</td>
			</tr>
		</tbody>
	</table>

	@if (!string.IsNullOrEmpty(returnSuperscriptText))
	{
		<p class="table-footnote">
			<span class="footnote-number">1)</span> @returnSuperscriptText
		</p>
	}

	@if (!string.IsNullOrEmpty(benchmarkSuperscriptText))
	{
		<p class="table-footnote">
			<span class="footnote-number">@benchmarkSuperscriptNumber)</span> @benchmarkSuperscriptText
		</p>
	}

	<!-- Charts -->
	<div class="charts-wrapper">
		<div class="chart-container">
			<h3>Bar Chart</h3>
			<canvas id="barChart"></canvas>
		</div>

		<div class="chart-container">
			<h3>Line Chart</h3>
			<canvas id="lineChart"></canvas>
		</div>
	</div>

	<div class="page-break"></div>

	<!-- Third Page: Disclaimer -->
	<div id="disclaimer-placeholder">
		<!-- The disclaimer content will be injected here -->
	</div>

	<div class="page-break"></div> 

	<!-- Fourth Page: Disclosures -->
	<div id="closure-placeholder">
		<!-- The disclosure content will be injected here -->
	</div>
	
	
	<script>

		var performanceData = @(new Microsoft.AspNetCore.Html.HtmlString(@Newtonsoft.Json.JsonConvert.SerializeObject(Model.Performances)));
		var years = performanceData.map(function(item) { return item.Year; });
		var netReturnData = performanceData.map(function(item) { return item.Return; });
		var benchmarkReturnData = performanceData.map(function(item) { return item.BenchmarkReturn; });

		var barchart = new Chart("barChart", {
			type: "bar",
			data: {
				labels: years,
				datasets: [{
					label: 'Net Return',
					data: netReturnData,
					backgroundColor: "red",
					borderColor: "darkred",
					borderWidth: 2
				}, {
					label: 'Benchmark',
					data: benchmarkReturnData,
					backgroundColor: "blue",
					borderColor: "darkblue",
					borderWidth: 2
				}]
			},
			options: {
				responsive: true,
				plugins: {
					legend: { display: true }
				},
					scales: {
					y: {
						min: -20,
						max: 120
					}
				}
			}
		});

		var linechart = new Chart("lineChart", {
			type: "line",
			data: {
				labels: years,
				datasets: [{
					label: 'Net Return',
					data: netReturnData,
					borderColor: "red",
					fill: false
				}, {
					label: 'Benchmark',
					data: benchmarkReturnData,
					borderColor: "blue",
					fill: false
				}]
			},
			options: {
				responsive: true,
				scales: {
					y: {
						min: -20,
						max: 120
					}
				},
				plugins: {
					legend: { display: true }
				}
			}
		});

	</script>
</body>
</html>
